{"ast":null,"code":"var _jsxFileName = \"/Users/vinhduong/react_projects_2020/12-adv-starting-project/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// OK\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport HomePage from './components/pages/HomePage';\nimport EventsPage from './components/pages/EventsPage';\nimport EventDetailPage from './components/pages/EventDetailPage';\nimport EditEventPage from './components/pages/EditEventPage';\nimport NewEventPage from './components/pages/NewEventPage';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport Root from './routes/root';\nimport EventRoot from './routes/event-root';\nimport ErrorPage from './components/pages/ErrorPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this),\n    errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }, this),\n    children: [{\n      path: '/',\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: '/events',\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: '/events/eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: '/events/new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: '/events/eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this)\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["HomePage","EventsPage","EventDetailPage","EditEventPage","NewEventPage","createBrowserRouter","RouterProvider","Root","EventRoot","ErrorPage","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","_c","$RefreshReg$"],"sources":["/Users/vinhduong/react_projects_2020/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// OK\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport HomePage from './components/pages/HomePage';\nimport EventsPage from './components/pages/EventsPage';\nimport EventDetailPage from './components/pages/EventDetailPage';\nimport EditEventPage from './components/pages/EditEventPage';\nimport NewEventPage from './components/pages/NewEventPage';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport Root from './routes/root';\nimport EventRoot from './routes/event-root';\nimport ErrorPage from './components/pages/ErrorPage';\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: '/',\n      element: <Root />,\n      errorElement: <ErrorPage />,\n      children: [\n        {\n          path: '/',\n          element: <HomePage />,\n        },\n        {\n          path: '/events',\n          element: <EventsPage />,\n        },\n        {\n          path: '/events/eventId',\n          element: <EventDetailPage />,\n        },\n        {\n          path: '/events/new',\n          element: <NewEventPage />,\n        },\n        {\n          path: '/events/eventId/edit',\n          element: <EditEventPage />,\n        },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router}></RouterProvider>;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,UAAU,MAAM,+BAA+B;AACtD,OAAOC,eAAe,MAAM,oCAAoC;AAChE,OAAOC,aAAa,MAAM,kCAAkC;AAC5D,OAAOC,YAAY,MAAM,iCAAiC;AAC1D,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAOC,SAAS,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACrD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGR,mBAAmB,CAAC,CACjC;IACES,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEJ,OAAA,CAACJ,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;IACjBC,YAAY,eAAET,OAAA,CAACF,SAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;IAC3BE,QAAQ,EAAE,CACR;MACEP,IAAI,EAAE,GAAG;MACTC,OAAO,eAAEJ,OAAA,CAACX,QAAQ;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACpB,CAAC,EACD;MACEL,IAAI,EAAE,SAAS;MACfC,OAAO,eAAEJ,OAAA,CAACV,UAAU;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACtB,CAAC,EACD;MACEL,IAAI,EAAE,iBAAiB;MACvBC,OAAO,eAAEJ,OAAA,CAACT,eAAe;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC3B,CAAC,EACD;MACEL,IAAI,EAAE,aAAa;MACnBC,OAAO,eAAEJ,OAAA,CAACP,YAAY;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACxB,CAAC,EACD;MACEL,IAAI,EAAE,sBAAsB;MAC5BC,OAAO,eAAEJ,OAAA,CAACR,aAAa;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACzB,CAAC;EAEL,CAAC,CACF,CAAC;EACF,oBAAOR,OAAA,CAACL,cAAc;IAACO,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAkB;AAC1D;AAACG,EAAA,GA/BQV,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}